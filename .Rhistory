1+1
import pandas as pd
pd.DataFrame([{"A":1,2,3,4},{"B":1,2,3,4}])
import pandas as pd
pd.DataFrame([{"A":[1,2,3,4]},{"B":[1,2,3,4]}])
ggplot(data = fortify(rolling_deltaH)) +
geom_line(aes(x = Index, y = deltaH))+
geom_hline(yintercept = q90, linetype = "dashed", color = "red") +
geom_hline(yintercept = q95, linetype = "dashed", color = "blue") +
geom_hline(yintercept = q99, linetype = "dashed", color = "green") +
annotate("text", x = min(index(rolling_deltaH)), y = q90, label = "q90", vjust = -0.5, color = "red") +
annotate("text", x = min(index(rolling_deltaH)), y = q95, label = "q95", vjust = -0.5, color = "blue") +
annotate("text", x = min(index(rolling_deltaH)), y = q99, label = "q99", vjust = -0.5, color = "green")
install.packages('IRkernel')
IRkernel::installspec()
IRkernel::installspec()
library(knitr)
library(kableExtra)
install.packages('kableExtra')
library(knitr)
library(kableExtra)
#| echo: false
#| output: asis
#| message: false
#| results: hide
#| include: false
#| warning: false
source('trading_signals_deltaH.R')
library(knitr)
library(kableExtra)
#| echo: false
#| output: asis
cat(paste("*","q90:",q90_360,"\n"))
cat(paste("*","q95:",q95_360,"\n"))
cat(paste("*","q99:",q99_360,"\n"))
#| echo: false
#| output: asis
for(t in unique(deltaH_melt_360$Ticker)){
cat(paste("###",t,"\n"))
print(plot_time_varying_efficiency(deltaH_melt_360,t,'360'))
}
#| echo: false
#| output: asis
cat(paste("*","q90:",q90_720,"\n"))
cat(paste("*","q95:",q95_720,"\n"))
cat(paste("*","q99:",q99_720,"\n"))
#| echo: false
#| output: asis
for(t in unique(deltaH_melt_720$Ticker)){
cat(paste("###",t,"\n"))
print(plot_time_varying_efficiency(deltaH_melt_720,t,'720'))
}
#| echo: false
#| output: asis
cat(paste("*","q90:",q90_1080,"\n"))
cat(paste("*","q95:",q95_1080,"\n"))
cat(paste("*","q99:",q99_1080,"\n"))
#| echo: false
#| output: asis
for(t in unique(deltaH_melt_1080$Ticker)){
cat(paste("###",t,"\n"))
print(plot_time_varying_efficiency(deltaH_melt_1080,t,'1080'))
}
status_efficiency_crypto_360 |>
kable(format = "html") |>
kable_styling(bootstrap_options = "striped", full_width = FALSE)
setwd("~/Documents/Faculdade/IC - Crypto Portfolio Efficiency")
library(PerformanceAnalytics)
library(PortfolioAnalytics)
library(ROI.plugin.quadprog)
library(ROI.plugin.glpk)
library(doParallel)
library(tidyverse)
library(quantmod)
library(reshape2)
library(parallel)
library(plot3D)
library(readxl)
library(dplyr)
library(GA)
library(xts)
library(zoo)
setwd("~/Documents/Faculdade/IC - Crypto Portfolio Efficiency")
source('utils_R/fractality.R')
source('utils_R/rolling_efficiency.R')
source('utils_R/finance.R')
source('utils_R/trading.R')
source('utils_R/cmdt.R')
library(PerformanceAnalytics)
library(PortfolioAnalytics)
library(ROI.plugin.quadprog)
library(ROI.plugin.glpk)
library(doParallel)
library(tidyverse)
library(quantmod)
library(reshape2)
library(parallel)
library(plot3D)
library(readxl)
library(dplyr)
library(GA)
library(xts)
library(zoo)
setwd("~/Documents/Faculdade/IC - Crypto Portfolio Efficiency")
source('utils_R/fractality.R')
source('utils_R/rolling_efficiency.R')
source('utils_R/finance.R')
source('utils_R/trading.R')
library(rvest)
library(quantmod)
# Set the start and end date for the data
start_date <- "2018-01-01"
end_date <- "2023-06-30"
# Define the commodity symbols you're interested in
commodity_symbols <- c("GOLD", "OIL", "SILVER", "COPPER", "PLAT", "PAL",
"GASREGCOVW", "WPU012202", "WPU012201", "WPU011104",
"WPU012301", "WPU024104", "WPU081", "WPU0113", "DCOILWTICO", "DCOILBRENTEU")
# Loop through each ticker symbol and fetch data
for (symbol in commodity_symbols) {
tryCatch({
data <- quantmod::Ad(getSymbols(symbol, from = dti, to = dtf, auto.assign = FALSE, src = "FRED"))
colnames(data) <- c(symbol)
data_list[[symbol]] <- data
}, error = function(e) {
cat("Error for symbol", symbol, ":", conditionMessage(e), "\n")
})
}
# Combine data from all symbols into a single data frame
cmdt_prices <- do.call(merge, data_list)
data_list <- list()
# Loop through each ticker symbol and fetch data
for (symbol in commodity_symbols) {
tryCatch({
data <- quantmod::Ad(getSymbols(symbol, from = dti, to = dtf, auto.assign = FALSE, src = "FRED"))
colnames(data) <- c(symbol)
data_list[[symbol]] <- data
}, error = function(e) {
cat("Error for symbol", symbol, ":", conditionMessage(e), "\n")
})
}
# Combine data from all symbols into a single data frame
cmdt_prices <- do.call(merge, data_list)
data_list <- list()
# Loop through each ticker symbol and fetch data
for (symbol in commodity_symbols) {
tryCatch({
data <- quantmod::Ad(getSymbols(symbol, from = dti, to = dtf, auto.assign = FALSE, src = "FRED"))
colnames(data) <- c(symbol)
data_list[[symbol]] <- data
}, error = function(e) {
cat("Error for symbol", symbol, ":", conditionMessage(e), "\n")
})
}
# Set the start and end date for the data
dti <- "2018-01-01"
dtf <- "2023-06-30"
# Define the commodity symbols you're interested in
commodity_symbols <- c("GOLD", "OIL", "SILVER", "COPPER", "PLAT", "PAL",
"GASREGCOVW", "WPU012202", "WPU012201", "WPU011104",
"WPU012301", "WPU024104", "WPU081", "WPU0113", "DCOILWTICO", "DCOILBRENTEU")
data_list <- list()
# Loop through each ticker symbol and fetch data
for (symbol in commodity_symbols) {
tryCatch({
data <- quantmod::Ad(getSymbols(symbol, from = dti, to = dtf, auto.assign = FALSE, src = "FRED"))
colnames(data) <- c(symbol)
data_list[[symbol]] <- data
}, error = function(e) {
cat("Error for symbol", symbol, ":", conditionMessage(e), "\n")
})
}
data_list <- list()
# Loop through each ticker symbol and fetch data
for (symbol in commodity_symbols) {
tryCatch({
data <- quantmod::Cl(getSymbols(symbol, from = dti, to = dtf, auto.assign = FALSE, src = "FRED"))
colnames(data) <- c(symbol)
data_list[[symbol]] <- data
}, error = function(e) {
cat("Error for symbol", symbol, ":", conditionMessage(e), "\n")
})
}
getSymbols(symbol, from = dti, to = dtf, auto.assign = FALSE, src = "FRED")
data_list <- list()
# Loop through each ticker symbol and fetch data
for (symbol in commodity_symbols) {
tryCatch({
data <- getSymbols(symbol, from = dti, to = dtf, auto.assign = FALSE, src = "FRED")
colnames(data) <- c(symbol)
data_list[[symbol]] <- data
}, error = function(e) {
cat("Error for symbol", symbol, ":", conditionMessage(e), "\n")
})
}
data_list <- list()
# Loop through each ticker symbol and fetch data
for (symbol in commodity_symbols) {
tryCatch({
data <- getSymbols(symbol, from = dti, to = dtf, auto.assign = FALSE, src = "FRED")
#colnames(data) <- c(symbol)
data_list[[symbol]] <- data
}, error = function(e) {
cat("Error for symbol", symbol, ":", conditionMessage(e), "\n")
})
}
data_list
library(PerformanceAnalytics)
library(PortfolioAnalytics)
library(ROI.plugin.quadprog)
library(ROI.plugin.glpk)
library(doParallel)
library(tidyverse)
library(quantmod)
library(reshape2)
library(parallel)
library(plot3D)
library(readxl)
library(dplyr)
library(GA)
library(xts)
library(zoo)
setwd("~/Documents/Faculdade/IC - Crypto Portfolio Efficiency")
source('utils_R/fractality.R')
source('utils_R/rolling_efficiency.R')
source('utils_R/finance.R')
source('utils_R/trading.R')
library(rvest)
library(quantmod)
# Set the start and end date for the data
dti <- "2018-01-01"
dtf <- "2023-06-30"
# Define the commodity symbols you're interested in
commodity_symbols <- c( "PCOPPUSDM","PMAIZMTUSDM" ,"PIORECRUSDM",'PWHEAMTUSDM',
"GASREGCOVW", "WPU012202", "WPU012201",
"WPU012301", "WPU081", "WPU0113", "DCOILWTICO", "DCOILBRENTEU")
data_list <- list()
# Loop through each ticker symbol and fetch data
for (symbol in commodity_symbols) {
tryCatch({
data <- getSymbols(symbol, from = dti, to = dtf, auto.assign = FALSE, src = "FRED")
#colnames(data) <- c(symbol)
data_list[[symbol]] <- data
}, error = function(e) {
cat("Error for symbol", symbol, ":", conditionMessage(e), "\n")
})
}
# Combine data from all symbols into a single data frame
cmdt_prices <- do.call(merge, data_list)
cmdt_returns <- PerformanceAnalytics::Return.calculate(cmdt_prices,method = 'log') |> na.omit()
returns_df <- data.frame(date = index(cmdt_returns), coredata(cmdt_returns))
returns_long <- melt(returns_df, id.vars = "date", variable.name = "Ticker", value.name = "return")
returns_long$date <- as.Date(returns_long$date)
get_rolling_deltaH_series(cmdt_returns ,file_base_name = 'cmdt_rolling_deltaH')
cmdt_returns
cmdt_prices
